/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Terra from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Integrations {
    export interface Options {
        environment?: core.Supplier<environments.TerraEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Override the dev-id header */
        devId: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the dev-id header */
        devId?: string;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class Integrations {
    protected readonly _options: Integrations.Options;

    constructor(_options: Integrations.Options) {
        this._options = _options;
    }

    /**
     * Retrieve a list of all available provider integrations on the API.
     *
     * @param {Integrations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.integrations.fetch()
     */
    public fetch(
        requestOptions?: Integrations.RequestOptions,
    ): core.HttpResponsePromise<Terra.IntegrationsFetchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__fetch(requestOptions));
    }

    private async __fetch(
        requestOptions?: Integrations.RequestOptions,
    ): Promise<core.WithRawResponse<Terra.IntegrationsFetchResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                "dev-id": requestOptions?.devId ?? this._options?.devId,
                ...(await this._getCustomAuthorizationHeaders()),
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TerraEnvironment.Default,
                "integrations",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Terra.IntegrationsFetchResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TerraError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TerraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TerraTimeoutError("Timeout exceeded when calling GET /integrations.");
            case "unknown":
                throw new errors.TerraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a detailed list of supported integrations, optionally filtered by the developer's enabled integrations and the requirement for SDK usage.
     *
     * @param {Terra.IntegrationsDetailedFetchRequest} request
     * @param {Integrations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.integrations.detailedfetch()
     */
    public detailedfetch(
        request: Terra.IntegrationsDetailedFetchRequest = {},
        requestOptions?: Integrations.RequestOptions,
    ): core.HttpResponsePromise<Terra.IntegrationsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__detailedfetch(request, requestOptions));
    }

    private async __detailedfetch(
        request: Terra.IntegrationsDetailedFetchRequest = {},
        requestOptions?: Integrations.RequestOptions,
    ): Promise<core.WithRawResponse<Terra.IntegrationsResponse>> {
        const { sdk } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (sdk != null) {
            _queryParams["sdk"] = sdk.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                "dev-id": requestOptions?.devId ?? this._options?.devId,
                ...(await this._getCustomAuthorizationHeaders()),
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TerraEnvironment.Default,
                "integrations/detailed",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Terra.IntegrationsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TerraError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TerraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TerraTimeoutError("Timeout exceeded when calling GET /integrations/detailed.");
            case "unknown":
                throw new errors.TerraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "x-api-key": apiKeyValue };
    }
}
