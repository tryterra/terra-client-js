/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { TerraClient } from "../../src/Client";

describe("Authentication", () => {
    test("authenticateuser", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            status: "success",
            user_id: "23dc2540-7139-44c6-8158-f81196e2cf2e",
            auth_url:
                "https://www.fitbit.com/oauth2/authorize?response_type=code&client_id=23BBG9&scope=settings+nutrition+sleep+heartrate+electrocardiogram+weight+respiratory_rate+oxygen_saturation+profile+temperature+cardio_fitness+activity+location&state=bLqqjPie9ptwoWm6VBxHCu6JkkoWJp",
        };
        server
            .mockEndpoint()
            .post("/auth/authenticateUser")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.authentication.authenticateuser({
            resource: "FITBIT",
        });
        expect(response).toEqual({
            status: "success",
            user_id: "23dc2540-7139-44c6-8158-f81196e2cf2e",
            auth_url:
                "https://www.fitbit.com/oauth2/authorize?response_type=code&client_id=23BBG9&scope=settings+nutrition+sleep+heartrate+electrocardiogram+weight+respiratory_rate+oxygen_saturation+profile+temperature+cardio_fitness+activity+location&state=bLqqjPie9ptwoWm6VBxHCu6JkkoWJp",
        });
    });

    test("generatewidgetsession", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            session_id: "23dc2540-7139-44c6-8158-f81196e2cf2e",
            url: "https://widget.tryterra.co/session/344d475f-296a-489a-a88c-54183671dafd",
            status: "success",
            expires_in: 900,
        };
        server
            .mockEndpoint()
            .post("/auth/generateWidgetSession")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.authentication.generatewidgetsession();
        expect(response).toEqual({
            session_id: "23dc2540-7139-44c6-8158-f81196e2cf2e",
            url: "https://widget.tryterra.co/session/344d475f-296a-489a-a88c-54183671dafd",
            status: "success",
            expires_in: 900,
        });
    });

    test("deauthenticateuser", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "success" };
        server
            .mockEndpoint()
            .delete("/auth/deauthenticateUser")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.authentication.deauthenticateuser({
            user_id: "user_id",
        });
        expect(response).toEqual({
            status: "success",
        });
    });

    test("generateauthtoken", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            status: "success",
            token: "250c68b9c21b78e40e7a3285a2d538d3bc24aabd3b4c76a782fb0a571ca4501d",
            expires_in: 180,
        };
        server
            .mockEndpoint()
            .post("/auth/generateAuthToken")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.authentication.generateauthtoken();
        expect(response).toEqual({
            status: "success",
            token: "250c68b9c21b78e40e7a3285a2d538d3bc24aabd3b4c76a782fb0a571ca4501d",
            expires_in: 180,
        });
    });
});
