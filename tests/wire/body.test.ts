/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { TerraClient } from "../../src/Client";

describe("Body", () => {
    test("fetch", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            data: [
                {
                    device_data: {
                        activation_timestamp: "2022-12-25T00:00:00.000000+05:00",
                        hardware_version: "v2.1",
                        manufacturer: "Garmin",
                        name: "Forerunner 945",
                        serial_number: "GR123456789",
                        software_version: "5.2.1",
                    },
                    hydration_data: { day_total_water_consumption_ml: 2500 },
                    metadata: {
                        end_time: "2022-10-28T10:00:00.000000+01:00",
                        start_time: "1999-11-23T09:00:00.000000+02:00",
                        timestamp_localization: 0,
                    },
                    oxygen_data: { avg_saturation_percentage: 98, vo2max_ml_per_min_per_kg: 45.5 },
                    glucose_data: { day_avg_blood_glucose_mg_per_dL: 92.5 },
                },
            ],
            type: "type",
        };
        server.mockEndpoint().get("/body").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.body.fetch({
            user_id: "user_id",
            start_date: 1,
        });
        expect(response).toEqual({
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            data: [
                {
                    device_data: {
                        activation_timestamp: "2022-12-25T00:00:00.000000+05:00",
                        hardware_version: "v2.1",
                        manufacturer: "Garmin",
                        name: "Forerunner 945",
                        serial_number: "GR123456789",
                        software_version: "5.2.1",
                    },
                    hydration_data: {
                        day_total_water_consumption_ml: 2500,
                    },
                    metadata: {
                        end_time: "2022-10-28T10:00:00.000000+01:00",
                        start_time: "1999-11-23T09:00:00.000000+02:00",
                        timestamp_localization: 0,
                    },
                    oxygen_data: {
                        avg_saturation_percentage: 98,
                        vo2max_ml_per_min_per_kg: 45.5,
                    },
                    glucose_data: {
                        day_avg_blood_glucose_mg_per_dL: 92.5,
                    },
                },
            ],
            type: "type",
        });
    });

    test("write", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });
        const rawRequestBody = {
            data: [
                {
                    metadata: {
                        end_time: "2022-10-28T10:00:00.000000+01:00",
                        start_time: "1999-11-23T09:00:00.000000+02:00",
                    },
                },
            ],
        };
        const rawResponseBody = {
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            log_ids: ["log_ids"],
            message: "message",
        };
        server
            .mockEndpoint()
            .post("/body")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.body.write({
            data: [
                {
                    metadata: {
                        end_time: "2022-10-28T10:00:00.000000+01:00",
                        start_time: "1999-11-23T09:00:00.000000+02:00",
                    },
                },
            ],
        });
        expect(response).toEqual({
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            log_ids: ["log_ids"],
            message: "message",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            processed_data: [{ id: "id", response_code: 1 }],
        };
        server
            .mockEndpoint()
            .delete("/body")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.body.delete({
            user_id: "user_id",
        });
        expect(response).toEqual({
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            processed_data: [
                {
                    id: "id",
                    response_code: 1,
                },
            ],
        });
    });
});
