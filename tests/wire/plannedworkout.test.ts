/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TerraClient } from "../../src/Client";
import * as Terra from "../../src/api/index";

describe("Plannedworkout", () => {
    test("fetch (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            data: [{ steps: [{ type: "PlannedWorkoutStep" }] }],
            type: "type",
        };
        server.mockEndpoint().get("/plannedWorkout").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.plannedworkout.fetch({
            user_id: "user_id",
            start_date: 1,
        });
        expect(response).toEqual({
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            data: [
                {
                    steps: [
                        {
                            type: "PlannedWorkoutStep",
                        },
                    ],
                },
            ],
            type: "type",
        });
    });

    test("fetch (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/plannedWorkout").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plannedworkout.fetch({
                user_id: "user_id",
                start_date: 1,
            });
        }).rejects.toThrow(
            new Terra.BadRequestError({
                key: "value",
            }),
        );
    });

    test("fetch (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/plannedWorkout").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plannedworkout.fetch({
                user_id: "user_id",
                start_date: 1,
            });
        }).rejects.toThrow(
            new Terra.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("fetch (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/plannedWorkout").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plannedworkout.fetch({
                user_id: "user_id",
                start_date: 1,
            });
        }).rejects.toThrow(
            new Terra.NotFoundError({
                key: "value",
            }),
        );
    });

    test("write (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });
        const rawRequestBody = { data: [{}] };
        const rawResponseBody = {
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            log_ids: ["log_ids"],
            message: "message",
        };
        server
            .mockEndpoint()
            .post("/plannedWorkout")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.plannedworkout.write({
            data: [{}],
        });
        expect(response).toEqual({
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            log_ids: ["log_ids"],
            message: "message",
        });
    });

    test("write (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });
        const rawRequestBody = {
            data: [
                { steps: undefined, metadata: undefined },
                { steps: undefined, metadata: undefined },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/plannedWorkout")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plannedworkout.write({
                data: [
                    {
                        steps: undefined,
                        metadata: undefined,
                    },
                    {
                        steps: undefined,
                        metadata: undefined,
                    },
                ],
            });
        }).rejects.toThrow(
            new Terra.BadRequestError({
                key: "value",
            }),
        );
    });

    test("write (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });
        const rawRequestBody = {
            data: [
                { steps: undefined, metadata: undefined },
                { steps: undefined, metadata: undefined },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/plannedWorkout")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plannedworkout.write({
                data: [
                    {
                        steps: undefined,
                        metadata: undefined,
                    },
                    {
                        steps: undefined,
                        metadata: undefined,
                    },
                ],
            });
        }).rejects.toThrow(
            new Terra.NotFoundError({
                key: "value",
            }),
        );
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            processed_data: [{ id: "id", response_code: 1 }],
        };
        server
            .mockEndpoint()
            .delete("/plannedWorkout")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.plannedworkout.delete({
            user_id: "user_id",
        });
        expect(response).toEqual({
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            processed_data: [
                {
                    id: "id",
                    response_code: 1,
                },
            ],
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });
        const rawRequestBody = { data: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/plannedWorkout")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plannedworkout.delete({
                user_id: "user_id",
                data: undefined,
            });
        }).rejects.toThrow(
            new Terra.BadRequestError({
                key: "value",
            }),
        );
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });
        const rawRequestBody = { data: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/plannedWorkout")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plannedworkout.delete({
                user_id: "user_id",
                data: undefined,
            });
        }).rejects.toThrow(
            new Terra.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });
        const rawRequestBody = { data: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/plannedWorkout")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plannedworkout.delete({
                user_id: "user_id",
                data: undefined,
            });
        }).rejects.toThrow(
            new Terra.NotFoundError({
                key: "value",
            }),
        );
    });
});
