/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { TerraClient } from "../../src/Client";

describe("Activity", () => {
    test("fetch", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            data: [
                {
                    active_durations_data: {
                        activity_seconds: 1800,
                        inactivity_seconds: 600,
                        low_intensity_seconds: 900,
                        moderate_intensity_seconds: 600,
                        num_continuous_inactive_periods: 3,
                        rest_seconds: 120,
                        vigorous_intensity_seconds: 300,
                    },
                    cheat_detection: 0,
                    device_data: {
                        activation_timestamp: "2022-12-25T00:00:00.000000+05:00",
                        hardware_version: "v2.1",
                        manufacturer: "Garmin",
                        name: "Forerunner 945",
                        serial_number: "GR123456789",
                        software_version: "5.2.1",
                    },
                    energy_data: { energy_kilojoules: 1200, energy_planned_kilojoules: 1150 },
                    MET_data: {
                        avg_level: 3.8,
                        num_high_intensity_minutes: 10,
                        num_inactive_minutes: 5,
                        num_low_intensity_minutes: 15,
                        num_moderate_intensity_minutes: 25,
                    },
                    metadata: {
                        city: "San Francisco",
                        country: "United States",
                        end_time: "2022-10-28T10:00:00.000000+01:00",
                        name: "Morning Run",
                        start_time: "1999-11-23T09:00:00.000000+02:00",
                        state: "California",
                        summary_id: "123e4567-e89b-12d3-a456-426614174000",
                        timestamp_localization: 0,
                        type: 1.1,
                        upload_type: 1.1,
                    },
                    movement_data: {
                        adjusted_max_speed_meters_per_second: 4.2,
                        avg_cadence_rpm: 85,
                        avg_pace_minutes_per_kilometer: 6.2,
                        avg_speed_meters_per_second: 3.2,
                        avg_torque_newton_meters: 40,
                        avg_velocity_meters_per_second: 3,
                        max_cadence_rpm: 110,
                        max_pace_minutes_per_kilometer: 6.5,
                        max_speed_meters_per_second: 4.5,
                        max_torque_newton_meters: 55.5,
                        max_velocity_meters_per_second: 4.5,
                        normalized_speed_meters_per_second: 3.8,
                    },
                    oxygen_data: { avg_saturation_percentage: 98, vo2max_ml_per_min_per_kg: 45.5 },
                    polyline_map_data: { summary_polyline: "}_p~iF~ps|U_ulLnnqC_mqNvxq`@" },
                    power_data: { avg_watts: 185, max_watts: 350 },
                    strain_data: { strain_level: 14.5 },
                    work_data: { work_kilojoules: 450.5 },
                },
            ],
            type: "type",
        };
        server.mockEndpoint().get("/activity").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.activity.fetch({
            user_id: "user_id",
            start_date: 1,
        });
        expect(response).toEqual({
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            data: [
                {
                    active_durations_data: {
                        activity_seconds: 1800,
                        inactivity_seconds: 600,
                        low_intensity_seconds: 900,
                        moderate_intensity_seconds: 600,
                        num_continuous_inactive_periods: 3,
                        rest_seconds: 120,
                        vigorous_intensity_seconds: 300,
                    },
                    cheat_detection: 0,
                    device_data: {
                        activation_timestamp: "2022-12-25T00:00:00.000000+05:00",
                        hardware_version: "v2.1",
                        manufacturer: "Garmin",
                        name: "Forerunner 945",
                        serial_number: "GR123456789",
                        software_version: "5.2.1",
                    },
                    energy_data: {
                        energy_kilojoules: 1200,
                        energy_planned_kilojoules: 1150,
                    },
                    MET_data: {
                        avg_level: 3.8,
                        num_high_intensity_minutes: 10,
                        num_inactive_minutes: 5,
                        num_low_intensity_minutes: 15,
                        num_moderate_intensity_minutes: 25,
                    },
                    metadata: {
                        city: "San Francisco",
                        country: "United States",
                        end_time: "2022-10-28T10:00:00.000000+01:00",
                        name: "Morning Run",
                        start_time: "1999-11-23T09:00:00.000000+02:00",
                        state: "California",
                        summary_id: "123e4567-e89b-12d3-a456-426614174000",
                        timestamp_localization: 0,
                        type: 1.1,
                        upload_type: 1.1,
                    },
                    movement_data: {
                        adjusted_max_speed_meters_per_second: 4.2,
                        avg_cadence_rpm: 85,
                        avg_pace_minutes_per_kilometer: 6.2,
                        avg_speed_meters_per_second: 3.2,
                        avg_torque_newton_meters: 40,
                        avg_velocity_meters_per_second: 3,
                        max_cadence_rpm: 110,
                        max_pace_minutes_per_kilometer: 6.5,
                        max_speed_meters_per_second: 4.5,
                        max_torque_newton_meters: 55.5,
                        max_velocity_meters_per_second: 4.5,
                        normalized_speed_meters_per_second: 3.8,
                    },
                    oxygen_data: {
                        avg_saturation_percentage: 98,
                        vo2max_ml_per_min_per_kg: 45.5,
                    },
                    polyline_map_data: {
                        summary_polyline: "}_p~iF~ps|U_ulLnnqC_mqNvxq`@",
                    },
                    power_data: {
                        avg_watts: 185,
                        max_watts: 350,
                    },
                    strain_data: {
                        strain_level: 14.5,
                    },
                    work_data: {
                        work_kilojoules: 450.5,
                    },
                },
            ],
            type: "type",
        });
    });

    test("write", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });
        const rawRequestBody = {
            data: [
                {
                    metadata: {
                        end_time: "2022-10-28T10:00:00.000000+01:00",
                        start_time: "1999-11-23T09:00:00.000000+02:00",
                        summary_id: "123e4567-e89b-12d3-a456-426614174000",
                        type: 1.1,
                        upload_type: 1.1,
                    },
                },
            ],
        };
        const rawResponseBody = {
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            log_ids: ["log_ids"],
            message: "message",
        };
        server
            .mockEndpoint()
            .post("/activity")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.activity.write({
            data: [
                {
                    metadata: {
                        end_time: "2022-10-28T10:00:00.000000+01:00",
                        start_time: "1999-11-23T09:00:00.000000+02:00",
                        summary_id: "123e4567-e89b-12d3-a456-426614174000",
                        type: 1.1,
                        upload_type: 1.1,
                    },
                },
            ],
        });
        expect(response).toEqual({
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
            log_ids: ["log_ids"],
            message: "message",
        });
    });
});
