/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TerraClient } from "../../src/Client";
import * as Terra from "../../src/api/index";

describe("Athlete", () => {
    test("fetch (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            type: "athlete",
            athlete: {
                age: 28,
                country: "United States",
                bio: "Passionate runner and cyclist",
                state: "California",
                last_name: "Smith",
                sex: "male",
                city: "San Francisco",
                email: "user@example.com",
                date_of_birth: "1999-11-23",
                first_name: "John",
                gender: "male",
                joined_provider: "2023-01-15",
                devices: [
                    {
                        activation_timestamp: "2022-12-25T00:00:00.000000+05:00",
                        hardware_version: "v2.1",
                        manufacturer: "Garmin",
                        name: "Forerunner 945",
                        serial_number: "GR123456789",
                        software_version: "5.2.1",
                    },
                ],
            },
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
        };
        server.mockEndpoint().get("/athlete").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.athlete.fetch({
            user_id: "user_id",
        });
        expect(response).toEqual({
            type: "athlete",
            athlete: {
                age: 28,
                country: "United States",
                bio: "Passionate runner and cyclist",
                state: "California",
                last_name: "Smith",
                sex: "male",
                city: "San Francisco",
                email: "user@example.com",
                date_of_birth: "1999-11-23",
                first_name: "John",
                gender: "male",
                joined_provider: "2023-01-15",
                devices: [
                    {
                        activation_timestamp: "2022-12-25T00:00:00.000000+05:00",
                        hardware_version: "v2.1",
                        manufacturer: "Garmin",
                        name: "Forerunner 945",
                        serial_number: "GR123456789",
                        software_version: "5.2.1",
                    },
                ],
            },
            user: {
                user_id: "123e4567-e89b-12d3-a456-426614174000",
                provider: "FITBIT",
                last_webhook_update: "2022-12-12T10:00:00.000000+00:00",
                scopes: "activity:read,sleep:read",
                reference_id: "user123@email.com",
                active: true,
            },
        });
    });

    test("fetch (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/athlete").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.athlete.fetch({
                user_id: "user_id",
            });
        }).rejects.toThrow(
            new Terra.BadRequestError({
                key: "value",
            }),
        );
    });

    test("fetch (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/athlete").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.athlete.fetch({
                user_id: "user_id",
            });
        }).rejects.toThrow(
            new Terra.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("fetch (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new TerraClient({ apiKey: "test", devId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/athlete").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.athlete.fetch({
                user_id: "user_id",
            });
        }).rejects.toThrow(
            new Terra.NotFoundError({
                key: "value",
            }),
        );
    });
});
